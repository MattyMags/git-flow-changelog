"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
function wrapGitProcess(args, cwd) {
    return new Promise((resolve, reject) => {
        const child = child_process_1.spawn('git', args, { cwd });
        let stdout = new Buffer('');
        let stderr = new Buffer('');
        child.stdout.on('data', data => stdout = Buffer.concat([stdout, data]));
        child.stderr.on('data', data => stderr = Buffer.concat([stderr, data]));
        child.once('close', (code) => {
            if (code !== 0 || stderr.toString() !== '') {
                reject(getErrorWithCode(code, stderr.toString()));
            }
            else {
                resolve(stdout.toString());
            }
        });
    });
}
exports.wrapGitProcess = wrapGitProcess;
function wrapGitProcessSync(args, cwd) {
    const child = child_process_1.spawnSync('git', args, { cwd });
    if (child.status !== 0) {
        throw getErrorWithCode(child.status, child.stderr.toString());
    }
    return child.stdout.toString();
}
exports.wrapGitProcessSync = wrapGitProcessSync;
function getErrorWithCode(code, message) {
    const err = new Error(message);
    err.code = code;
    return err;
}
