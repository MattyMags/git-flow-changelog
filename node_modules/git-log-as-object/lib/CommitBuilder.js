"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RECORD_SEPARATOR = '\x1E';
const UNIT_SEPARATOR = '\x1F';
const buildPerson = (name, email) => ({ name, email });
const buildDate = (epoch) => new Date(parseInt(epoch, 10) * 1000);
const buildParents = (raw) => raw.split(' ');
const buildTags = (raw) => raw.split(', ')
    .filter(ref => ref.startsWith('tag: '))
    .map(ref => ref.replace(/^tag: /, ''));
const buildRefs = (raw) => raw.split(', ')
    .filter(ref => !ref.startsWith('tag: '));
const buildSigner = (raw) => {
    const matches = raw.match(/^(.*?) <(.*?)>/);
    return matches !== null ? { name: matches[1], email: matches[2] } : null;
};
class CommitBuilder {
    constructor(optionalKeys) {
        this.keys = Array.from(new Set([...CommitBuilder.defaultKeys, ...optionalKeys]));
        this.formatString =
            `${UNIT_SEPARATOR}${[...this.placeholderTokens()].join(UNIT_SEPARATOR)}${RECORD_SEPARATOR}`;
    }
    buildAll(rawData) {
        const records = rawData.split(RECORD_SEPARATOR).slice(0, -1);
        return records.map(data => this.buildCommit(data));
    }
    *placeholderTokens() {
        for (const key of this.keys) {
            const sources = CommitBuilder.sources;
            for (const token of sources[key].tokens) {
                yield token;
            }
        }
    }
    buildCommit(rawData) {
        const commit = {};
        const fields = rawData.split(UNIT_SEPARATOR).slice(1);
        for (const key of this.keys) {
            const sources = CommitBuilder.sources;
            const source = sources[key];
            const args = source.tokens.map(() => fields.shift());
            if (source.builder !== undefined) {
                commit[key] = source.builder(...args);
            }
            else {
                commit[key] = args[0];
            }
        }
        return commit;
    }
}
CommitBuilder.sources = {
    fullHash: { tokens: ['%H'] },
    partialHash: { tokens: ['%h'] },
    author: { builder: buildPerson, tokens: ['%an', '%ae'] },
    authorTime: { builder: buildDate, tokens: ['%at'] },
    committer: { builder: buildPerson, tokens: ['%cn', '%ce'] },
    commitTime: { builder: buildDate, tokens: ['%ct'] },
    subject: { tokens: ['%s'] },
    body: { tokens: ['%b'] },
    tags: { builder: buildTags, tokens: ['%D'] },
    refs: { builder: buildRefs, tokens: ['%D'] },
    fullBody: { tokens: ['%B'] },
    treeHash: { tokens: ['%T'] },
    partialTreeHash: { tokens: ['%t'] },
    parentHashes: { builder: buildParents, tokens: ['%P'] },
    partialParentHashes: { builder: buildParents, tokens: ['%p'] },
    gpgKey: { tokens: ['%GK'] },
    gpgSigner: { builder: buildSigner, tokens: ['%GS'] },
    gpgStatus: { tokens: ['%G?'] },
};
CommitBuilder.defaultKeys = [
    'fullHash',
    'partialHash',
    'author',
    'authorTime',
    'committer',
    'commitTime',
    'subject',
    'body',
    'tags',
];
exports.CommitBuilder = CommitBuilder;
